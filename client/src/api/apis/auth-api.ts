/* tslint:disable */
/* eslint-disable */
/**
 * CatchUp API
 * CatchUp API for the CatchUp project
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Register } from '../models';
import { TokenObtainPair } from '../models';
import { TokenRefresh } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginCreate: async (body: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authLoginCreate.');
            }
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginCreateForm: async (username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username2' is not null or undefined
            if (username2 === null || username2 === undefined) {
                throw new RequiredError('username2','Required parameter username2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'password2' is not null or undefined
            if (password2 === null || password2 === undefined) {
                throw new RequiredError('password2','Required parameter password2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'access2' is not null or undefined
            if (access2 === null || access2 === undefined) {
                throw new RequiredError('access2','Required parameter access2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'refresh2' is not null or undefined
            if (refresh2 === null || refresh2 === undefined) {
                throw new RequiredError('refresh2','Required parameter refresh2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'access' is not null or undefined
            if (access === null || access === undefined) {
                throw new RequiredError('access','Required parameter access was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'refresh' is not null or undefined
            if (refresh === null || refresh === undefined) {
                throw new RequiredError('refresh','Required parameter refresh was null or undefined when calling authLoginCreateForm.');
            }
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginCreateForm: async (username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username2' is not null or undefined
            if (username2 === null || username2 === undefined) {
                throw new RequiredError('username2','Required parameter username2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'password2' is not null or undefined
            if (password2 === null || password2 === undefined) {
                throw new RequiredError('password2','Required parameter password2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'access2' is not null or undefined
            if (access2 === null || access2 === undefined) {
                throw new RequiredError('access2','Required parameter access2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'refresh2' is not null or undefined
            if (refresh2 === null || refresh2 === undefined) {
                throw new RequiredError('refresh2','Required parameter refresh2 was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'access' is not null or undefined
            if (access === null || access === undefined) {
                throw new RequiredError('access','Required parameter access was null or undefined when calling authLoginCreateForm.');
            }
            // verify required parameter 'refresh' is not null or undefined
            if (refresh === null || refresh === undefined) {
                throw new RequiredError('refresh','Required parameter refresh was null or undefined when calling authLoginCreateForm.');
            }
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProfileRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshTokenCreate: async (body: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authRefreshTokenCreate.');
            }
            const localVarPath = `/api/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshTokenCreateForm: async (access2: string, refresh2: string, access: string, refresh: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'access2' is not null or undefined
            if (access2 === null || access2 === undefined) {
                throw new RequiredError('access2','Required parameter access2 was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'refresh2' is not null or undefined
            if (refresh2 === null || refresh2 === undefined) {
                throw new RequiredError('refresh2','Required parameter refresh2 was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'access' is not null or undefined
            if (access === null || access === undefined) {
                throw new RequiredError('access','Required parameter access was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'refresh' is not null or undefined
            if (refresh === null || refresh === undefined) {
                throw new RequiredError('refresh','Required parameter refresh was null or undefined when calling authRefreshTokenCreateForm.');
            }
            const localVarPath = `/api/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshTokenCreateForm: async (access2: string, refresh2: string, access: string, refresh: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'access2' is not null or undefined
            if (access2 === null || access2 === undefined) {
                throw new RequiredError('access2','Required parameter access2 was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'refresh2' is not null or undefined
            if (refresh2 === null || refresh2 === undefined) {
                throw new RequiredError('refresh2','Required parameter refresh2 was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'access' is not null or undefined
            if (access === null || access === undefined) {
                throw new RequiredError('access','Required parameter access was null or undefined when calling authRefreshTokenCreateForm.');
            }
            // verify required parameter 'refresh' is not null or undefined
            if (refresh === null || refresh === undefined) {
                throw new RequiredError('refresh','Required parameter refresh was null or undefined when calling authRefreshTokenCreateForm.');
            }
            const localVarPath = `/api/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            if (access !== undefined) { 
                localVarFormParams.append('access', access as any);
            }

            if (refresh !== undefined) { 
                localVarFormParams.append('refresh', refresh as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Register} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterCreate: async (body: Register, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authRegisterCreate.');
            }
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterCreateForm: async (username2: string, email2: string, password2: string, username: string, email: string, password: string, password3: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username2' is not null or undefined
            if (username2 === null || username2 === undefined) {
                throw new RequiredError('username2','Required parameter username2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'email2' is not null or undefined
            if (email2 === null || email2 === undefined) {
                throw new RequiredError('email2','Required parameter email2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password2' is not null or undefined
            if (password2 === null || password2 === undefined) {
                throw new RequiredError('password2','Required parameter password2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password3' is not null or undefined
            if (password3 === null || password3 === undefined) {
                throw new RequiredError('password3','Required parameter password3 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password3' is not null or undefined
            if (password3 === null || password3 === undefined) {
                throw new RequiredError('password3','Required parameter password3 was null or undefined when calling authRegisterCreateForm.');
            }
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwtAuth required


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (password2 !== undefined) { 
                localVarFormParams.append('password2', password2 as any);
            }

            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (password2 !== undefined) { 
                localVarFormParams.append('password2', password2 as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterCreateForm: async (username2: string, email2: string, password2: string, username: string, email: string, password: string, password3: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username2' is not null or undefined
            if (username2 === null || username2 === undefined) {
                throw new RequiredError('username2','Required parameter username2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'email2' is not null or undefined
            if (email2 === null || email2 === undefined) {
                throw new RequiredError('email2','Required parameter email2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password2' is not null or undefined
            if (password2 === null || password2 === undefined) {
                throw new RequiredError('password2','Required parameter password2 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password3' is not null or undefined
            if (password3 === null || password3 === undefined) {
                throw new RequiredError('password3','Required parameter password3 was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling authRegisterCreateForm.');
            }
            // verify required parameter 'password3' is not null or undefined
            if (password3 === null || password3 === undefined) {
                throw new RequiredError('password3','Required parameter password3 was null or undefined when calling authRegisterCreateForm.');
            }
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwtAuth required


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (password2 !== undefined) { 
                localVarFormParams.append('password2', password2 as any);
            }

            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }

            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }

            if (password2 !== undefined) { 
                localVarFormParams.append('password2', password2 as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreate(body: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenObtainPair>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authLoginCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenObtainPair>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenObtainPair>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProfileRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authProfileRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreate(body: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenRefresh>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRefreshTokenCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenRefresh>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenRefresh>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Register} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreate(body: Register, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Register>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRegisterCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreateForm(username2: string, email2: string, password2: string, username: string, email: string, password: string, password3: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Register>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreateForm(username2: string, email2: string, password2: string, username: string, email: string, password: string, password3: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Register>>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreate(body: TokenObtainPair, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenObtainPair>> {
            return AuthApiFp(configuration).authLoginCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenObtainPair>> {
            return AuthApiFp(configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {string} username2 
         * @param {string} password2 
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} username 
         * @param {string} password 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenObtainPair>> {
            return AuthApiFp(configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProfileRetrieve(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AuthApiFp(configuration).authProfileRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreate(body: TokenRefresh, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenRefresh>> {
            return AuthApiFp(configuration).authRefreshTokenCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenRefresh>> {
            return AuthApiFp(configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {string} access2 
         * @param {string} refresh2 
         * @param {string} access 
         * @param {string} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenRefresh>> {
            return AuthApiFp(configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Register} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreate(body: Register, options?: AxiosRequestConfig): Promise<AxiosResponse<Register>> {
            return AuthApiFp(configuration).authRegisterCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreateForm(username2: string, email2: string, password2: string, username: string, email: string, password: string, password3: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Register>> {
            return AuthApiFp(configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username2 
         * @param {string} email2 
         * @param {string} password2 
         * @param {string} password3 
         * @param {string} username 
         * @param {string} email 
         * @param {string} password 
         * @param {string} password3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterCreateForm(username2: string, email2: string, password2: string, password3: string, username: string, email: string, password: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Register>> {
            return AuthApiFp(configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authLoginCreate(body: TokenObtainPair, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenObtainPair>> {
        return AuthApiFp(this.configuration).authLoginCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {string} username2 
     * @param {string} password2 
     * @param {string} access2 
     * @param {string} refresh2 
     * @param {string} username 
     * @param {string} password 
     * @param {string} access 
     * @param {string} refresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenObtainPair>> {
        return AuthApiFp(this.configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {string} username2 
     * @param {string} password2 
     * @param {string} access2 
     * @param {string} refresh2 
     * @param {string} username 
     * @param {string} password 
     * @param {string} access 
     * @param {string} refresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authLoginCreateForm(username2: string, password2: string, access2: string, refresh2: string, username: string, password: string, access: string, refresh: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenObtainPair>> {
        return AuthApiFp(this.configuration).authLoginCreateForm(username2, password2, access2, refresh2, username, password, access, refresh, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authProfileRetrieve(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AuthApiFp(this.configuration).authProfileRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRefreshTokenCreate(body: TokenRefresh, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenRefresh>> {
        return AuthApiFp(this.configuration).authRefreshTokenCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {string} access2 
     * @param {string} refresh2 
     * @param {string} access 
     * @param {string} refresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenRefresh>> {
        return AuthApiFp(this.configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {string} access2 
     * @param {string} refresh2 
     * @param {string} access 
     * @param {string} refresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRefreshTokenCreateForm(access2: string, refresh2: string, access: string, refresh: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenRefresh>> {
        return AuthApiFp(this.configuration).authRefreshTokenCreateForm(access2, refresh2, access, refresh, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Register} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRegisterCreate(body: Register, options?: AxiosRequestConfig) : Promise<AxiosResponse<Register>> {
        return AuthApiFp(this.configuration).authRegisterCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username2 
     * @param {string} email2 
     * @param {string} password2 
     * @param {string} password3 
     * @param {string} username 
     * @param {string} email 
     * @param {string} password 
     * @param {string} password3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRegisterCreateForm(username2: string, email2: string, password2: string, password3: string, username: string, email: string, password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Register>> {
        return AuthApiFp(this.configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username2 
     * @param {string} email2 
     * @param {string} password2 
     * @param {string} password3 
     * @param {string} username 
     * @param {string} email 
     * @param {string} password 
     * @param {string} password3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public async authRegisterCreateForm(username2: string, email2: string, password2: string, password3: string, username: string, email: string, password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Register>> {
        return AuthApiFp(this.configuration).authRegisterCreateForm(username2, email2, password2, password3, username, email, password, password3, options).then((request) => request(this.axios, this.basePath));
    }
}
